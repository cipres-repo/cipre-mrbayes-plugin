package com.cipres.mrBayesPlugin;

import java.sql.Date;
import java.util.ArrayList;

import com.biomatters.geneious.publicapi.documents.AnnotatedPluginDocument;
import com.biomatters.geneious.publicapi.documents.DocumentUtilities;
import com.biomatters.geneious.publicapi.documents.sequence.AminoAcidSequenceDocument;
import com.biomatters.geneious.publicapi.implementations.sequence.DefaultAminoAcidSequence;
import com.biomatters.geneious.publicapi.plugin.DocumentSelectionSignature;
import com.biomatters.geneious.publicapi.plugin.GeneiousActionOptions;
import com.biomatters.geneious.publicapi.plugin.Options;

import jebl.util.ProgressListener;

public class DocumentOperation {

   //This method is so this DocumentOperation can be returned by PluginUtilities.getDocumentOperation(String id);
   public String getUniqueId() {
       return "New_Sequence";
   }


   //GeneiousActionOptions specify how the action is going to be displayed within Geneious.
   //in this case it is going to be displayed on the toolbar with the label "New Sequence", and the pencil icon.
   public GeneiousActionOptions getActionOptions(){
       return new GeneiousActionOptions("New Sequence").setInMainToolbar(true);
   }

   public String getHelp(){
       return "This operation creates a <b>New Sequence</b>";
   }

   //DocumentSelection signatures define what types of documents (and numbers of documents) the operation can take.
   //in this case we do not need to take documents, so we can just return an empty set.
   public DocumentSelectionSignature[] getSelectionSignatures(){
       return new DocumentSelectionSignature[0];
   }

   //Geneious will display the Options returned from this method as a panel before calling performOperation().
   public Options getOptions(AnnotatedPluginDocument[] docs){
       Options options = new Options(this.getClass());
       //Genieous will identify this option by the "name" parameter we pass in.
       //We can get this value later in the performOperation method by referring to this name.
       Options.MultipleLineStringOption stringOption = options.addMultipleLineStringOption("residues", "", "",5,true);
       return options;
   }

   //This is the method that does all the work.  Geneious passes a list of the documents that were selected when the user
   //started the operation, a progressListener, and the options panel that we returned in the getOptionsPanel() method above.
   public ArrayList performOperation(AnnotatedPluginDocument[] docs, ProgressListener progress, Options options){
       //lets create the list that we're going to return...
       ArrayList sequenceList = new ArrayList();

       //The options that we created in the getOptions() method above has been passed to us, hopefuly the user has filled in their sequence.
       //We get the option we added by using its name.  MultiLineStringOption has a String ValueType, so we can safely cast to a String object.
       String residues = (String)options.getValue("residues");

       //lets construct a new sequence document from the residues that the user entered
       AminoAcidSequenceDocument sequence = new DefaultAminoAcidSequence("New Sequence","A new Sequence",residues,new Date(5, 4, 2015));

       //and add it to the list
       sequenceList.add(DocumentUtilities.createAnnotatedPluginDocument(sequence));

       //normaly we would set the progress incrimentaly as we went, but this operation is quick so we just set it to finished when we're done.
       progress.setProgress(1.0);

       //return the list containing the sequence we just created, and we're done!
       return sequenceList;
  }
	
}

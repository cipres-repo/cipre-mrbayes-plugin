package com.cipres.mrBayesPlugin;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jdom.Element;
import org.ngbw.directclient.CiCipresException;
import org.ngbw.directclient.CiResultFile;
import org.ngbw.directclient.example.Example;

import com.biomatters.geneious.publicapi.documents.AnnotatedPluginDocument;
import com.biomatters.geneious.publicapi.documents.sequence.SequenceAlignmentDocument;
import com.biomatters.geneious.publicapi.plugin.DocumentOperation;
import com.biomatters.geneious.publicapi.plugin.DocumentOperationException;
import com.biomatters.geneious.publicapi.plugin.DocumentSelectionSignature;
import com.biomatters.geneious.publicapi.plugin.GeneiousActionOptions;
import com.biomatters.geneious.publicapi.plugin.Icons;
import com.biomatters.geneious.publicapi.plugin.Options;
import com.biomatters.geneious.publicapi.plugin.PluginUtilities;
import com.biomatters.geneious.publicapi.utilities.FileUtilities;
import com.biomatters.geneious.publicapi.utilities.IconUtilities;
import com.cipres.mrBayesPlugin.ui.MrBayesOptions;
import com.cipres.mrBayesPlugin.utilities.CipresUtilities;
import com.cipres.mrBayesPlugin.utilities.MrBayesUtilities;

import jebl.util.ProgressListener;
import jebl.util.SafePrintWriter;

public class CipresMrBayesTree extends DocumentOperation{
	static final String GENEIOUS_NEX = "geneious.nex";

	@Override
	public GeneiousActionOptions getActionOptions() {
		//saved under cipres-mrbayes-plugin/GeneiousFiles/resources/images/TreeIcon.png for now
		Icons icon= IconUtilities.getIcons("TreeIcon.png");
        return new GeneiousActionOptions("MrBayes_Cipres",
                "Perform posterior tree simulation from an alignment", icon, GeneiousActionOptions.Category.TreeBuilding);
	}

	@Override
	public String getHelp() {
		return "Getting Help";
	}

	@Override
	public DocumentSelectionSignature[] getSelectionSignatures() {
		DocumentSelectionSignature singleAlignmentSignature = new DocumentSelectionSignature(
                SequenceAlignmentDocument.class, 1, 1);
        return new DocumentSelectionSignature[]{singleAlignmentSignature/*, nucleotideSequenceSelectionSignature, proteinSequenceSelectionSignature*/};
	}
	
	public Options getOptions(final AnnotatedPluginDocument[] docs) throws DocumentOperationException{
        Options options = null;
        options = new MrBayesOptions(docs);
        return options;
    }
	
	public List performOperation(AnnotatedPluginDocument[] docs, ProgressListener progress, Options options) throws DocumentOperationException{
		String sb = MrBayesUtilities.getGeneratedCommandBlockFromOptions(options);
		InputStream is;
		Map<String, Collection<String>> vParams = new HashMap<String, Collection<String>>();//MrBayesUtilities.getVParams(MrBayesOptions.getJsonCommand());
		Map<String, String> inputParams = new HashMap<String, String>();
		Map<String, String> metadata = new HashMap<String, String>();
		
		List<File> files = new ArrayList<File>();
        final AnnotatedPluginDocument doc = docs[0];
        final SequenceAlignmentDocument alignmentDoc = (SequenceAlignmentDocument) doc.getDocument();

        if (alignmentDoc.getNumberOfSequences() < 4) {
            throw new DocumentOperationException("MrBayes requires at least 4 sequences.\nPlease select an alignment" +
                    " containing 4 or more sequences.");
        }
        

		is = Example.class.getResourceAsStream("/" + doc.getName());
		File dest = File.createTempFile("Example", ".txt"); 
		dest.deleteOnExit();

		CiResultFile.copyInputStreamToFile(is, dest);
		return dest.getAbsolutePath();
		
        
        
//        inputParams.put("input", files.get(0).toString());
        metadata.put("statusEmail", "true");
		metadata.put("clientJobName", "test");
		vParams.put("runtime_", Arrays.asList(".2"));
		vParams.put("hgapresidues_", Arrays.asList("A", "D"));
//		inputParams.put("infile_", files.get(0).toPath());
		System.err.println(files.get(0).toString());
		
        try {
			CipresUtilities.submitJob(vParams, inputParams, metadata);
		} catch (CiCipresException e) {
			System.err.println("Caught in SubmitJob");
			e.printStackTrace();
		}
		return null;
		
	}

}

package com.cipres.mrBayesPlugin.models;

import java.util.ArrayList;
import java.util.List;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

import org.json.simple.JSONArray;

import com.cipres.mrBayesPlugin.models.UserModel.Job;

public class DisplayGUIModel extends JPanel{
	
	class TableModel extends AbstractTableModel {
		private String[] columnNames = 
    		{
            "Job Name",
            "Date Submitted",
            "Job Status"
            };
		
		private List<Job> jobs = new ArrayList<Job>();
		
		public TableModel(JSONArray json){
			populateTable(json);
			
		}
    	

        public int getColumnCount() {
          return columnNames.length;
        }

        public int getRowCount() {
          return data.length;
        }

        public String getColumnName(int col) {
          return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
          return data[row][col];
        }

        /*
         * JTable uses this method to determine the default renderer/ editor for
         * each cell. If we didn't implement this method, then the last column
         * would contain text ("true"/"false"), rather than a check box.
         */
        public Class getColumnClass(int c) {
          return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's editable.
         */
        public boolean isCellEditable(int row, int col) {
          //Note that the data/cell address is constant,
          //no matter where the cell appears onscreen.
          if (col < 2) {
            return false;
          } else {
            return true;
          }
        }

        /*
         * Don't need to implement this method unless your table's data can
         * change.
         */
        public void setValueAt(Object value, int row, int col) {
        	
          data[row][col] = value;
          fireTableCellUpdated(row, col);

        }
        
        public void populateTable(JSONArray json){

    		for(int i = 0; i < json.size(); i++){
    			setValueAt("test", 0, 0);
    		}
    		
    	}
    }
	
    
    public JPanel createPanel(JSONArray json){

    	JPanel panel = new JPanel();
    	GroupLayout layout = new GroupLayout(panel);
    	JButton updateButton = new JButton("Update List");
	    JButton downloadButton = new JButton("Download Job");
	    JButton deleteButton = new JButton("Delete Job");
	    JTable table = createTable(json);
	    JScrollPane scroll = new JScrollPane(table);

    	panel.setLayout(layout);
	    layout.setAutoCreateContainerGaps(true);
	    layout.setAutoCreateGaps(true);
    	
	    layout.setHorizontalGroup(
	    	layout.createSequentialGroup()
	    		.addComponent(scroll)
	    		.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
	    			.addComponent(updateButton)
	    			.addComponent(downloadButton)
	    			.addComponent(deleteButton))
		);
	    
	    layout.setVerticalGroup(
	    	layout.createParallelGroup()
			.addComponent(scroll)
    		.addGroup(layout.createSequentialGroup()
    			.addComponent(updateButton)
    			.addComponent(downloadButton)
    			.addComponent(deleteButton))
	    );
	   
	    return panel;
    }

    private JTable createTable(JSONArray json){
    	JTable table = new JTable(new TableModel(json));
    	table.setEnabled(false);
    	return table;
    }
    
    
}

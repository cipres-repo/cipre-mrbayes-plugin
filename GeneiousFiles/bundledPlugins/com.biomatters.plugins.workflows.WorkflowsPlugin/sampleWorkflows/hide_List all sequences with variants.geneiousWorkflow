<geneiousWorkflows>
  <XMLSerialisableRootElement name="List all sequences with variants" geneiousVersion="8.1.4" uniqueId="d42e7c33-157e-4862-87f8-5c0397caa0e7" revisionNumber="12" description="&lt;html&gt;&lt;center&gt;&#xA;Given an alignment or contig that has had variants called on its reference sequence, identifies&lt;br&gt;&#xA;all sequences that contributed to at least one variant. This can also be run on a stand-alone&lt;br&gt;&#xA;region with variant annotations that has been extracted from the reference sequence.&lt;br&gt;&lt;br&gt;&#xA;&lt;font color='gray'&gt;Note: Variants must have been identified with the advanced setting called&lt;br&gt;'Record names of all contributing sequences for each variant' turned on.&#xA;&lt;/font&gt;&lt;/center&gt;&lt;/html&gt;">
    <workflowElement type="com.biomatters.plugins.workflows.WorkflowElementCustomCode">
      <code>import com.google.common.base.Splitter;

public static List&lt;AnnotatedPluginDocument&gt; performOperation(List&lt;AnnotatedPluginDocument&gt; documents, Options options,
                                                             ProgressListener progressListener) throws DocumentOperationException {
    Splitter splitter = Splitter.on(",").trimResults().omitEmptyStrings();
    Set&lt;String&gt; allVariantSequenceNames = new LinkedHashSet&lt;String&gt;();
    for (AnnotatedPluginDocument document : documents) {
        PluginDocument pluginDocument = document.getDocument();
		SequenceDocument referenceSequence;
		if (pluginDocument instanceof SequenceDocument) {
			referenceSequence = (SequenceDocument) pluginDocument;
		}
		else if (pluginDocument instanceof SequenceAlignmentDocument) {
	        SequenceAlignmentDocument alignment = (SequenceAlignmentDocument) pluginDocument;
	        if (alignment.getContigReferenceSequenceIndex()&lt;0)
	            throw new DocumentOperationException("This operation only works on alignments/contigs with a reference sequence or on stand-alone regions extracted from a reference sequence.");
	        referenceSequence = alignment.getSequence(alignment.getContigReferenceSequenceIndex());
		}
        else
            throw new DocumentOperationException("This operation only works on alignments/contigs with a reference sequence or on stand-alone regions extracted from a reference sequence.");

        for (SequenceAnnotation variantAnnotation : SequenceUtilities.getAnnotationsOfType(referenceSequence, SequenceAnnotation.TYPE_POLYMORPHISM, true)) {
            String variantSequences = variantAnnotation.getQualifierValue("Variant Sequences");
            allVariantSequenceNames.addAll(splitter.splitToList(variantSequences));
        }
    }
    List&lt;String&gt; sortedVariantSequences = new ArrayList&lt;String&gt;(allVariantSequenceNames);
    Collections.sort(sortedVariantSequences);
    String message = "Found " + sortedVariantSequences.size() + " sequences: " + StringUtilities.join(", ", sortedVariantSequences);
    Dialogs.showMessageDialog(message);
    return documents;
}</code>
    </workflowElement>
    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAE7UlEQVR42tVXfWxTVRQ/7T7Z+HA6dUGMyxKBTcBMUYjDaHQmAn4kLCRmBKJiBv+g/jUi/mETlJho1MDW9vWDt3YZ29oMA8o0JGNDWVwCyQiZCoqCxHXAlo6PktmM9njOfe+177Wvbt3QxJP8cnvfu72/3z333HPPA/g/G9rAip/BHAE33I92WIISPIZOWEntUmyGMmqLEMEyOyKagMhyMQD5uBcKEpBgAZE9LOCCl6jfSPBT/1vq7ybUogce4rEzJ5ahkCYtFSQSrKL2ecKLhHXU30gk76nopX6YgCom6ZkDHfAseaYke/IA5KAX5qmrW6uu7mtCP2FARR+9OyEgwTgGqhA7lyD21GsiQoQG2ooHsyffC/OJvIrwBhEcpYmu6Vanx3iC/OYfiLdGEMfPIrrzlfdO+ETERBPcQ968C/1QLLYyU1wIt/MgDiIJ3iKcJsTFZMEViK0LEdsrFLhzFRKNXMP4T4iuHE3gYRKwgxZRR7/XCzFuWJQxOEVw2aGC/rBZJVcm+q4B8cJBxFAf4jkZcfBjxC9Xp5NPjCEeWpPcAiU2fiFcJfxMAlwiYM2CU0S6A+5TA+wQYUJMdOoDRIwj3p7AhA3tI48sI8KrmcgjIkYkGEnZsjjNL5MXnuZTZBTAbnHCo9R+qCpG/GYdYnQcDcYeCC43kvOYw8/oiS4nyL1zEH/rVLyY9MxrvFijAA4UJ2ygAUNioK9UcbvexgZ15JcUYo38rFfx1v55SSFMfmVA+a8xOLeTgAeMAhxQrh63YTHozOdoapORJDm3TM5eYeNt6NmUTq4J+EcPOGAZKWtW9w8x/CNmNI6HVHLNWLi3KBP5KEEyjwEHPEnKgvQiJgZP3sIpLZWc+/vnKuRa0BrJj6mrL08/BQ6ooZdHEvvHkZ+NTU3eJ3ILZ1fONal5YFYCODjNyD0FmoDjBK9IRGbksxJw44JCzq0WH0zeWpa1gOxjQC9CkP+VJB9qosRUowkYFvcC1wxUR5jfA25YIVRO5xRkMs4PTM7xEI8h9r5O5BZNxD7iqMxc3fAxlMA+ZR6YTjxo9v12/cVkJw8/Yn4Dchp2wVPUdhgyYeRPnLlRDB3dkPSAE/bwFpjd//lcNNCALWrBMSr+wIF17dzM+TljdizWx8BWKnIWpgtQ7v9VhCYD+cTozMmj1xH739bIwyL7SbCGq6x0AVSzkftfoQEX7wj5pW5yfV3yQnLCD6J+ZC9LkJcugItOTo9a2RU6bj7xcI9SB/DpEEc0ngT3+TkHLi9AIY8SToqtVYraIvMTkOqBlrvTPcB9fm5eF5rhMpF+RfNuEmefC9yM57/53rnozluNTusXiRjQizCSj6p5IpZCGFOfD6un6CNRWXF5xzGWidxms1lPBRoWhOTHl0Y98+vpzNKFYUmKGD6WQm7pR5elF50W+viwHNGBMqjVTqQ7aY469ORVR+TiMpTLC5E4aBnmVbAsy4Xa7/MHNj53vbXyndvekhNxd+6YYYVu61jcWzQQ9ZbaInJFfbilcn3YV7VWw5hvee2VlpU1F3211ad9WxZP+xugu7u7oKura5HWP9Ox7dWRAy803mx/oi0ml4TinsIb3EbaqttC7S/vOhlo3HxHPzB5C/ReYBvofL9uKLjj3fPBrbt/73rz01+7tu0ZDO7c9a995bKI/+qL2u/3FwcCgRyt/zf9nG8uPmZQPwAAAABJRU5ErkJggg==</icon>
  </XMLSerialisableRootElement>
</geneiousWorkflows>